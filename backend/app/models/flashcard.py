from sqlalchemy import Column, Integer, String, ForeignKey, DateTime, Boolean
from sqlalchemy.sql import func
from sqlalchemy.orm import relationship
from ..database import Base

class Word(Base):
    __tablename__ = "words"
    
    id = Column(Integer, primary_key=True, index=True)
    original_word = Column(String, index=True, nullable=False)  # Word in English
    translated_word = Column(String, nullable=False)  # Word in target language
    definition = Column(String, nullable=False)
    example_sentence = Column(String, nullable=True)
    image_url = Column(String, nullable=True)  # From Pexels API
    category_id = Column(Integer, ForeignKey("categories.id"), nullable=False)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    created_by_ai = Column(Boolean, default=True)  # Flag if generated by AI
    
    # Relationships
    category = relationship("Category", back_populates="words")
    results = relationship("FlashcardResult", back_populates="word")

class FlashcardSession(Base):
    __tablename__ = "flashcard_sessions"
    
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    category_id = Column(Integer, ForeignKey("categories.id"), nullable=False)
    started_at = Column(DateTime(timezone=True), server_default=func.now())
    completed_at = Column(DateTime(timezone=True), nullable=True)
    
    # Relationships
    user = relationship("User", back_populates="flashcard_sessions")
    category = relationship("Category", back_populates="flashcard_sessions")
    results = relationship("FlashcardResult", back_populates="session")

class FlashcardResult(Base):
    __tablename__ = "flashcard_results"
    
    id = Column(Integer, primary_key=True, index=True)
    session_id = Column(Integer, ForeignKey("flashcard_sessions.id"), nullable=False)
    word_id = Column(Integer, ForeignKey("words.id"), nullable=False)
    is_correct = Column(Boolean, default=False)
    user_response = Column(String, nullable=True)  # User's interaction with the card
    is_pinned = Column(Boolean, default=False)  # For saving important results
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    
    # Relationships
    session = relationship("FlashcardSession", back_populates="results")
    word = relationship("Word", back_populates="results")